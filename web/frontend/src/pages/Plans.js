import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Form, Alert, Badge, InputGroup } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { Search } from 'react-bootstrap-icons';
import { plansAPI, subscriptionsAPI } from '../utils/api';


const POPULAR_SERVICES = [
  { 
    id: 'yandex-plus', 
    name: '–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å',
    icon: 'üîç', 
    color: '#ffcc00' 
  },
  { 
    id: 'google-one', 
    name: 'Google One',
    icon: '‚òÅÔ∏è',
    color: '#4285F4' 
  },
  { 
    id: 'spotify', 
    name: 'Spotify Premium',
    icon: 'üéµ',
    color: '#1ED760' 
  },
  { 
    id: 'netflix', 
    name: 'Netflix',
    icon: 'üì∫',
    color: '#E50914' 
  },
  { 
    id: 'apple-one', 
    name: 'Apple One',
    icon: 'üçé',
    color: '#A2AAAD' 
  },
  {
    id: 'kinopoisk',
    name: '–ö–∏–Ω–æ–ø–æ–∏—Å–∫ HD',
    icon: 'üé¨',
    color: '#f60'
  },
  {
    id: 'amediateka',
    name: 'Amediateka',
    icon: 'üìΩÔ∏è',
    color: '#000000'
  },
  {
    id: 'ivi',
    name: 'IVI',
    icon: 'üé¶',
    color: '#ea003d'
  },
  {
    id: 'premier',
    name: 'Premier',
    icon: 'üéûÔ∏è',
    color: '#6236ff'
  }
];

const Plans = () => {
  const [plans, setPlans] = useState([]);
  const [filteredPlans, setFilteredPlans] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [actionSuccess, setActionSuccess] = useState('');
  
  const navigate = useNavigate();

  useEffect(() => {
    fetchPlans();
  }, []);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    if (plans.length > 0) {
      // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –º–µ—Å—è—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 30 –¥–Ω–µ–π)
      let monthlyPlans = plans.filter(plan => 
        (plan.duration >= 28 && plan.duration <= 31) || 
        (plan.period_type === 'months' && plan.duration === 1)
      );
      
      // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
      let filtered = [...monthlyPlans];
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
      if (searchQuery) {
        filtered = filtered.filter(plan => 
          plan.name.toLowerCase().includes(searchQuery.toLowerCase())
        );
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (selectedCategory !== 'all') {
        filtered = filtered.filter(plan => {
          // –°–æ–æ—Ç–Ω–æ—Å–∏–º –ø–ª–∞–Ω —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
          const serviceName = plan.name.toLowerCase();
          
          switch(selectedCategory) {
            case 'video':
              return ['netflix', '–∫–∏–Ω–æ–ø–æ–∏—Å–∫', 'ivi', 'amediateka', 'premier', '–∫–∏–Ω–æ'].some(
                keyword => serviceName.includes(keyword)
              );
            case 'music':
              return ['spotify', '—è–Ω–¥–µ–∫—Å –º—É–∑—ã–∫–∞', 'apple music', '–º—É–∑—ã–∫–∞'].some(
                keyword => serviceName.includes(keyword)
              );
            case 'storage':
              return ['google one', '—è–Ω–¥–µ–∫—Å –¥–∏—Å–∫', 'icloud', '–æ–±–ª–∞–∫–æ', '—Ö—Ä–∞–Ω–∏–ª–∏—â–µ'].some(
                keyword => serviceName.includes(keyword)
              );
            default:
              return true;
          }
        });
      }
      
      setFilteredPlans(filtered);
    }
  }, [searchQuery, selectedCategory, plans]);

  const fetchPlans = async () => {
    setLoading(true);
    setError('');

    try {
      const data = await plansAPI.getAll();
      const availablePlans = data.plans || [];
      
      setPlans(availablePlans);
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ useEffect
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSubscribe = async (planId) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const token = localStorage.getItem('token');
    
    if (!token) {
      navigate('/login', { state: { redirectTo: '/plans' } });
      return;
    }

    // –°—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    try {
      setLoading(true);
      
      // Convert planId to number and validate it
      const numPlanId = Number(planId);
      if (isNaN(numPlanId) || numPlanId <= 0) {
        throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π ID –ø–ª–∞–Ω–∞');
      }
      
      // Make sure we're sending an object with the exact required format
      const response = await subscriptionsAPI.subscribe(numPlanId);
      setActionSuccess('–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage, —á—Ç–æ–±—ã Dashboard –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–∏–ª —Å—á–µ—Ç—á–∏–∫–∏
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
        const statsData = await subscriptionsAPI.getStats();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ localStorage –¥–ª—è Dashboard
        if (statsData && statsData.stats) {
          localStorage.setItem('subscription_stats', JSON.stringify(statsData.stats));
        }
      } catch (statsErr) {
        console.error('Failed to update stats cache:', statsErr);
      }
      
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
      setTimeout(() => navigate('/dashboard'), 1500);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const formatFeatures = (featuresString) => {
    if (!featuresString) return [];
    
    try {
      return JSON.parse(featuresString);
    } catch {
      // –ï—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π JSON, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é
      return featuresString.includes(',') 
        ? featuresString.split(',').map(f => f.trim())
        : [featuresString];
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü
  const formatPeriod = (days) => {
    return '–º–µ—Å—è—Ü';
  };

  return (
    <Container className="py-5">
      <h1 className="text-center mb-5">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</h1>

      {error && <Alert variant="danger" dismissible onClose={() => setError('')}>
        <Alert.Heading>–û—à–∏–±–∫–∞!</Alert.Heading>
        <p>{error}</p>
      </Alert>}

      {actionSuccess && <Alert variant="success" dismissible onClose={() => setActionSuccess('')}>
        <Alert.Heading>–£—Å–ø–µ—à–Ω–æ!</Alert.Heading>
        <p>{actionSuccess}</p>
      </Alert>}

      <Row className="mb-4">
        <Col md={6}>
          <Form.Group>
            <InputGroup>
              <Form.Control 
                type="text" 
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞..." 
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              <Button variant="outline-secondary">
                <Search />
              </Button>
            </InputGroup>
          </Form.Group>
        </Col>
        <Col md={6}>
          <Form.Group>
            <Form.Select 
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
            >
              <option value="all">–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã</option>
              <option value="video">–í–∏–¥–µ–æ—Å–µ—Ä–≤–∏—Å—ã</option>
              <option value="music">–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ</option>
              <option value="storage">–û–±–ª–∞—á–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</option>
              <option value="other">–î—Ä—É–≥–æ–µ</option>
            </Form.Select>
          </Form.Group>
        </Col>
      </Row>

      {/* –°–µ–∫—Ü–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ */}
      <div className="mb-5">
        <h3 className="mb-3">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã</h3>
        <Row className="g-4">
          {POPULAR_SERVICES.map(service => (
            <Col key={service.id} xs={6} md={3} lg={2}>
              <Card 
                className="service-icon-card text-center h-100"
                onClick={() => setSearchQuery(service.name)}
                style={{ cursor: 'pointer', borderColor: service.color }}
              >
                <Card.Body className="d-flex flex-column justify-content-center align-items-center">
                  <div className="service-icon mb-2" style={{ fontSize: '2rem' }}>
                    {service.icon}
                  </div>
                  <div className="service-name">
                    {service.name}
                  </div>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      </div>

      {loading ? (
        <div className="text-center my-5">
          <div className="spinner-border" role="status">
            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
        </div>
      ) : filteredPlans.length > 0 ? (
        <Row className="g-4">
          {filteredPlans.map(plan => (
            <Col md={6} lg={4} key={plan.id} className="mb-4">
              <Card className="plan-card h-100">
                <Card.Header as="h5" className="d-flex justify-content-between align-items-center">
                  {plan.name}
                </Card.Header>
                <Card.Body className="d-flex flex-column">
                  <Card.Title className="mb-3">
                    <span className="display-6">{plan.price.toFixed(2)} ‚ÇΩ</span>
                    <small className="text-muted"> / –º–µ—Å—è—Ü</small>
                  </Card.Title>
                  <Card.Text>{plan.description}</Card.Text>
                  
                  <div className="mt-3 mb-4">
                    <h6>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</h6>
                    <ul>
                      {formatFeatures(plan.features).map((feature, index) => (
                        <li key={index}>{feature}</li>
                      ))}
                    </ul>
                  </div>
                  
                  <Button 
                    variant="primary" 
                    onClick={() => handleSubscribe(plan.id)}
                    className="mt-auto"
                    disabled={loading}
                  >
                    {loading ? '–ü–æ–¥–æ–∂–¥–∏—Ç–µ...' : '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'}
                  </Button>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      ) : (
        <div className="text-center my-5">
          <p>–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.</p>
          <Button variant="outline-secondary" onClick={() => {
            setSearchQuery('');
            setSelectedCategory('all');
          }}>
            –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
          </Button>
        </div>
      )}
    </Container>
  );
};

export default Plans;